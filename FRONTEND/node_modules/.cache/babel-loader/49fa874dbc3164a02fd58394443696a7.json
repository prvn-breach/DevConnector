{"ast":null,"code":"import axios from'axios';import jwt_decode from'jwt-decode';// Decode encrypted token\nimport setAuthToken from'../utils/setAuthToken';// Set token to Auth Headers\nimport{GET_ERRORS,SET_CURRENT_USER}from\"./types\";// Register User\nexport var registerUser=function registerUser(userData,history){return function(dispatch){axios.post('/api/users/register',userData).then(function(res){return history.push('/login');}).catch(function(err){return dispatch({type:GET_ERRORS,payload:err.response.data});});};};// Login - Get User Token\nexport var loginUser=function loginUser(credentials){return function(dispatch){axios.post('/api/users/login',credentials).then(function(res){// Save to localStorage\nvar token=res.data.token;// Set token to ls\nlocalStorage.setItem('jwtToken',token);// Set token to Auth header\nsetAuthToken(token);// Decode Token\nvar decoded=jwt_decode(token);// Set Current User\ndispatch(setCurrentUser(decoded));}).catch(function(err){return dispatch({type:GET_ERRORS,payload:err.response.data});});};};// Set Current User\nexport var setCurrentUser=function setCurrentUser(decoded){return{type:SET_CURRENT_USER,payload:decoded};};// Log out user\nexport var logoutUser=function logoutUser(history){return function(dispatch){// Remove Token from localStorage\nlocalStorage.removeItem('jwtToken');// Remove Auth Header for future requests\nsetAuthToken(false);// Set current to {}  which will set isAuthenticated false\ndispatch(setCurrentUser({}));// Redirect to landing page\nhistory.push('/');};};","map":{"version":3,"sources":["/home/workspace/practise-mern/practise/DevConnector/client/src/actions/authActions.js"],"names":["axios","jwt_decode","setAuthToken","GET_ERRORS","SET_CURRENT_USER","registerUser","userData","history","dispatch","post","then","res","push","catch","err","type","payload","response","data","loginUser","credentials","token","localStorage","setItem","decoded","setCurrentUser","logoutUser","removeItem"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,UAAP,KAAuB,YAAvB,CAAqC;AACrC,MAAOC,CAAAA,YAAP,KAAyB,uBAAzB,CAAkD;AAClD,OAASC,UAAT,CAAqBC,gBAArB,KAA6C,SAA7C,CAGA;AACA,MAAO,IAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,QAAD,CAAWC,OAAX,QAAuB,UAAAC,QAAQ,CAAI,CAC3DR,KAAK,CAACS,IAAN,CAAY,qBAAZ,CAAmCH,QAAnC,EACKI,IADL,CACU,SAAAC,GAAG,QAAIJ,CAAAA,OAAO,CAACK,IAAR,CAAa,QAAb,CAAJ,EADb,EAEKC,KAFL,CAEW,SAAAC,GAAG,QAAIN,CAAAA,QAAQ,CAAC,CACfO,IAAI,CAAEZ,UADS,CAEfa,OAAO,CAAEF,GAAG,CAACG,QAAJ,CAAaC,IAFP,CAAD,CAAZ,EAFd,EAOH,CAR2B,EAArB,CAWP;AACA,MAAO,IAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACC,WAAD,QAAiB,UAAAZ,QAAQ,CAAI,CAClDR,KAAK,CAACS,IAAN,CAAW,kBAAX,CAA+BW,WAA/B,EACKV,IADL,CACU,SAAAC,GAAG,CAAI,CACT;AADS,GAEDU,CAAAA,KAFC,CAESV,GAAG,CAACO,IAFb,CAEDG,KAFC,CAIT;AACAC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAiCF,KAAjC,EAEA;AACAnB,YAAY,CAACmB,KAAD,CAAZ,CAEA;AACA,GAAMG,CAAAA,OAAO,CAAGvB,UAAU,CAACoB,KAAD,CAA1B,CAEA;AACAb,QAAQ,CAACiB,cAAc,CAACD,OAAD,CAAf,CAAR,CACH,CAhBL,EAiBKX,KAjBL,CAiBW,SAAAC,GAAG,QAAIN,CAAAA,QAAQ,CAAC,CACfO,IAAI,CAAEZ,UADS,CAEfa,OAAO,CAAEF,GAAG,CAACG,QAAJ,CAAaC,IAFP,CAAD,CAAZ,EAjBd,EAsBH,CAvBwB,EAAlB,CAyBP;AACA,MAAO,IAAMO,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACD,OAAD,CAAa,CACvC,MAAO,CACHT,IAAI,CAAEX,gBADH,CAEHY,OAAO,CAAEQ,OAFN,CAAP,CAIH,CALM,CAOP;AACA,MAAO,IAAME,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAAAnB,OAAO,QAAI,UAAAC,QAAQ,CAAI,CAC7C;AACAc,YAAY,CAACK,UAAb,CAAwB,UAAxB,EACA;AACAzB,YAAY,CAAC,KAAD,CAAZ,CACA;AACAM,QAAQ,CAACiB,cAAc,CAAC,EAAD,CAAf,CAAR,CACA;AACAlB,OAAO,CAACK,IAAR,CAAa,GAAb,EACH,CATgC,EAA1B","sourcesContent":["import axios from 'axios';\nimport jwt_decode from 'jwt-decode'; // Decode encrypted token\nimport setAuthToken from '../utils/setAuthToken'; // Set token to Auth Headers\nimport { GET_ERRORS, SET_CURRENT_USER } from \"./types\";\n\n\n// Register User\nexport const registerUser = (userData, history) => dispatch => {\n    axios.post ('/api/users/register', userData)\n        .then(res => history.push('/login'))\n        .catch(err => dispatch({\n                type: GET_ERRORS,\n                payload: err.response.data\n            })\n        );\n}\n\n\n// Login - Get User Token\nexport const loginUser = (credentials) => dispatch => {\n    axios.post('/api/users/login', credentials)\n        .then(res => {\n            // Save to localStorage\n            const { token } = res.data;\n\n            // Set token to ls\n            localStorage.setItem('jwtToken', token);\n\n            // Set token to Auth header\n            setAuthToken(token);\n\n            // Decode Token\n            const decoded = jwt_decode(token);\n            \n            // Set Current User\n            dispatch(setCurrentUser(decoded));\n        })\n        .catch(err => dispatch({\n                type: GET_ERRORS,\n                payload: err.response.data\n            })\n        );\n}\n\n// Set Current User\nexport const setCurrentUser = (decoded) => {\n    return {\n        type: SET_CURRENT_USER,\n        payload: decoded\n    }\n}\n\n// Log out user\nexport const logoutUser = history => dispatch => {\n    // Remove Token from localStorage\n    localStorage.removeItem('jwtToken');\n    // Remove Auth Header for future requests\n    setAuthToken(false);\n    // Set current to {}  which will set isAuthenticated false\n    dispatch(setCurrentUser({}));\n    // Redirect to landing page\n    history.push('/');\n}"]},"metadata":{},"sourceType":"module"}