{"ast":null,"code":"var _jsxFileName = \"/home/workspace/practise-mern/practise/DevConnector/client/src/components/auth/Register.js\";\nimport React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\"; // Define routing\n\nimport PropTypes from \"prop-types\"; // Define proptypes\n\nimport { connect } from \"react-redux\"; // connect component with redux store\n\nimport { registerUser } from \"../../actions/authActions\"; // Actions\n\nimport TextFieldGroup from \"../common/TextFieldGroup\"; // Input Fields hook\n\nclass Register extends Component {\n  // Initilaize State\n  constructor() {\n    super();\n    this.state = {\n      name: '',\n      email: '',\n      password: '',\n      password2: '',\n      errors: {}\n    };\n    this.onChange = this.onChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  } // Redirect to Dashboard when user is already logged in\n\n\n  componentDidMount() {\n    if (this.props.auth.isAuthenticated) {\n      this.props.history.push('/dashboard');\n    }\n  } // Recieve props for this component\n\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.errors) {\n      this.setState({\n        errors: nextProps.errors\n      });\n    }\n  } // Trigger On change when type input fields\n\n\n  onChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  } // Form submit\n\n\n  onSubmit(e) {\n    e.preventDefault();\n    const newUser = {\n      name: this.state.name,\n      email: this.state.email,\n      password: this.state.password,\n      password2: this.state.password2\n    };\n    this.props.registerUser(newUser, this.props.history);\n  }\n\n  render() {\n    const {\n      errors\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"register\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-8 m-auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"display-4 text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 29\n      }\n    }, \"Sign Up\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"lead text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 29\n      }\n    }, \"Create your DevConnector account\"), /*#__PURE__*/React.createElement(\"form\", {\n      noValidate: true,\n      onSubmit: this.onSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(TextFieldGroup, {\n      type: \"text\",\n      error: errors.name,\n      placeholder: \"Name\",\n      name: \"name\",\n      value: this.state.name,\n      onChange: this.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(TextFieldGroup, {\n      type: \"email\",\n      error: errors.email,\n      placeholder: \"Email Address\",\n      name: \"email\",\n      value: this.state.email,\n      onChange: this.onChange,\n      info: \"This site uses Gravatar so if you want a profile image, use a Gravatar email\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(TextFieldGroup, {\n      type: \"password\",\n      error: errors.password,\n      placeholder: \"Password\",\n      name: \"password\",\n      value: this.state.password,\n      onChange: this.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(TextFieldGroup, {\n      type: \"password\",\n      error: errors.password2,\n      placeholder: \"Confirm Password\",\n      name: \"password2\",\n      value: this.state.password2,\n      onChange: this.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"submit\",\n      className: \"btn btn-info btn-block mt-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 33\n      }\n    }))))));\n  }\n\n} // PropTypes defines datatype and which props are required\n\n\nRegister.propTypes = {\n  registerUser: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  errors: PropTypes.object.isRequired\n}; // Define props from state\n\nconst mapStateToProp = state => ({\n  auth: state.auth,\n  errors: state.errors\n});\n\nexport default connect(mapStateToProp, {\n  registerUser\n})(withRouter(Register));","map":{"version":3,"sources":["/home/workspace/practise-mern/practise/DevConnector/client/src/components/auth/Register.js"],"names":["React","Component","withRouter","PropTypes","connect","registerUser","TextFieldGroup","Register","constructor","state","name","email","password","password2","errors","onChange","bind","onSubmit","componentDidMount","props","auth","isAuthenticated","history","push","componentWillReceiveProps","nextProps","setState","e","target","value","preventDefault","newUser","render","propTypes","func","isRequired","object","mapStateToProp"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\"; // Define routing\nimport PropTypes from \"prop-types\"; // Define proptypes\nimport { connect } from \"react-redux\"; // connect component with redux store\nimport { registerUser } from \"../../actions/authActions\"; // Actions\nimport TextFieldGroup from \"../common/TextFieldGroup\"; // Input Fields hook\n\nclass Register extends Component {\n\n    // Initilaize State\n    constructor() {\n        super();\n        this.state = {\n            name: '',\n            email: '',\n            password: '',\n            password2: '',\n            errors: {}\n        };\n        this.onChange = this.onChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n\n    // Redirect to Dashboard when user is already logged in\n    componentDidMount () {\n        if (this.props.auth.isAuthenticated) {\n            this.props.history.push('/dashboard');\n        }\n    }\n\n    // Recieve props for this component\n    componentWillReceiveProps(nextProps) {\n        if(nextProps.errors) {\n            this.setState({ errors: nextProps.errors });\n        }\n    }\n\n    // Trigger On change when type input fields\n    onChange(e) {\n        this.setState({[e.target.name]: e.target.value});\n    }\n    \n    // Form submit\n    onSubmit(e) {\n        e.preventDefault();\n        const newUser = {\n            name: this.state.name,\n            email: this.state.email,\n            password: this.state.password,\n            password2: this.state.password2\n        };\n        \n        this.props.registerUser(newUser, this.props.history);\n    };\n\n    render() {\n        const { errors } = this.state;\n        return (\n            <div className=\"register\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8 m-auto\">\n                            <h1 className=\"display-4 text-center\">Sign Up</h1>\n                            <p className=\"lead text-center\">\n                                Create your DevConnector account\n                            </p>\n                            <form noValidate onSubmit={this.onSubmit}>\n                                <TextFieldGroup \n                                    type=\"text\"\n                                    error={errors.name}\n                                    placeholder=\"Name\"\n                                    name=\"name\"\n                                    value={this.state.name}\n                                    onChange={this.onChange}\n                                />\n                                <TextFieldGroup \n                                    type=\"email\"\n                                    error={errors.email}\n                                    placeholder=\"Email Address\"\n                                    name=\"email\"\n                                    value={this.state.email}\n                                    onChange={this.onChange}\n                                    info=\"This site uses Gravatar so if you want a profile image, use a Gravatar email\"\n                                />\n                                <TextFieldGroup \n                                    type=\"password\"\n                                    error={errors.password}\n                                    placeholder=\"Password\"\n                                    name=\"password\"\n                                    value={this.state.password}\n                                    onChange={this.onChange}\n                                />\n                                <TextFieldGroup \n                                    type=\"password\"\n                                    error={errors.password2}\n                                    placeholder=\"Confirm Password\"\n                                    name=\"password2\"\n                                    value={this.state.password2}\n                                    onChange={this.onChange}\n                                />\n                                <input type=\"submit\" className=\"btn btn-info btn-block mt-4\" />\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n// PropTypes defines datatype and which props are required\nRegister.propTypes = {\n    registerUser: PropTypes.func.isRequired,\n    auth: PropTypes.object.isRequired,\n    errors: PropTypes.object.isRequired\n}\n\n// Define props from state\nconst mapStateToProp = (state) => ({\n    auth: state.auth,\n    errors: state.errors\n});\n\nexport default connect( mapStateToProp, {registerUser}) (withRouter(Register) );\n"]},"metadata":{},"sourceType":"module"}