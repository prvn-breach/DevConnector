{"ast":null,"code":"import axios from 'axios';\nimport jwt_decode from 'jwt-decode'; // Decode encrypted token\n\nimport setAuthToken from '../utils/setAuthToken'; // Set token to Auth Headers\n\nimport { GET_ERRORS, SET_CURRENT_USER } from \"./types\"; // Register User\n\nexport const registerUser = (userData, history) => dispatch => {\n  axios.post('/api/users/register', userData).then(res => history.push('/login')).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Login - Get User Token\n\nexport const loginUser = credentials => dispatch => {\n  axios.post('/api/users/login', credentials).then(res => {\n    // Save to localStorage\n    const {\n      token\n    } = res.data; // Set token to ls\n\n    localStorage.setItem('jwtToken', token); // Set token to Auth header\n\n    setAuthToken(token); // Decode Token\n\n    const decoded = jwt_decode(token); // Set Current User\n\n    dispatch(setCurrentUser(decoded));\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Set Current User\n\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // Log out user\n\nexport const logoutUser = history => dispatch => {\n  // Remove Token from localStorage\n  localStorage.removeItem('jwtToken'); // Remove Auth Header for future requests\n\n  setAuthToken(false); // Set current to {}  which will set isAuthenticated false\n\n  dispatch(setCurrentUser({})); // Redirect to landing page\n\n  history.push('/');\n};","map":{"version":3,"sources":["/home/workspace/practise-mern/practise/DevConnector/client/src/actions/authActions.js"],"names":["axios","jwt_decode","setAuthToken","GET_ERRORS","SET_CURRENT_USER","registerUser","userData","history","dispatch","post","then","res","push","catch","err","type","payload","response","data","loginUser","credentials","token","localStorage","setItem","decoded","setCurrentUser","logoutUser","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB,C,CAAqC;;AACrC,OAAOC,YAAP,MAAyB,uBAAzB,C,CAAkD;;AAClD,SAASC,UAAT,EAAqBC,gBAArB,QAA6C,SAA7C,C,CAGA;;AACA,OAAO,MAAMC,YAAY,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAuBC,QAAQ,IAAI;AAC3DR,EAAAA,KAAK,CAACS,IAAN,CAAY,qBAAZ,EAAmCH,QAAnC,EACKI,IADL,CACUC,GAAG,IAAIJ,OAAO,CAACK,IAAR,CAAa,QAAb,CADjB,EAEKC,KAFL,CAEWC,GAAG,IAAIN,QAAQ,CAAC;AACfO,IAAAA,IAAI,EAAEZ,UADS;AAEfa,IAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFP,GAAD,CAF1B;AAOH,CARM,C,CAWP;;AACA,OAAO,MAAMC,SAAS,GAAIC,WAAD,IAAiBZ,QAAQ,IAAI;AAClDR,EAAAA,KAAK,CAACS,IAAN,CAAW,kBAAX,EAA+BW,WAA/B,EACKV,IADL,CACUC,GAAG,IAAI;AACT;AACA,UAAM;AAAEU,MAAAA;AAAF,QAAYV,GAAG,CAACO,IAAtB,CAFS,CAIT;;AACAI,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC,EALS,CAOT;;AACAnB,IAAAA,YAAY,CAACmB,KAAD,CAAZ,CARS,CAUT;;AACA,UAAMG,OAAO,GAAGvB,UAAU,CAACoB,KAAD,CAA1B,CAXS,CAaT;;AACAb,IAAAA,QAAQ,CAACiB,cAAc,CAACD,OAAD,CAAf,CAAR;AACH,GAhBL,EAiBKX,KAjBL,CAiBWC,GAAG,IAAIN,QAAQ,CAAC;AACfO,IAAAA,IAAI,EAAEZ,UADS;AAEfa,IAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFP,GAAD,CAjB1B;AAsBH,CAvBM,C,CAyBP;;AACA,OAAO,MAAMO,cAAc,GAAID,OAAD,IAAa;AACvC,SAAO;AACHT,IAAAA,IAAI,EAAEX,gBADH;AAEHY,IAAAA,OAAO,EAAEQ;AAFN,GAAP;AAIH,CALM,C,CAOP;;AACA,OAAO,MAAME,UAAU,GAAGnB,OAAO,IAAIC,QAAQ,IAAI;AAC7C;AACAc,EAAAA,YAAY,CAACK,UAAb,CAAwB,UAAxB,EAF6C,CAG7C;;AACAzB,EAAAA,YAAY,CAAC,KAAD,CAAZ,CAJ6C,CAK7C;;AACAM,EAAAA,QAAQ,CAACiB,cAAc,CAAC,EAAD,CAAf,CAAR,CAN6C,CAO7C;;AACAlB,EAAAA,OAAO,CAACK,IAAR,CAAa,GAAb;AACH,CATM","sourcesContent":["import axios from 'axios';\nimport jwt_decode from 'jwt-decode'; // Decode encrypted token\nimport setAuthToken from '../utils/setAuthToken'; // Set token to Auth Headers\nimport { GET_ERRORS, SET_CURRENT_USER } from \"./types\";\n\n\n// Register User\nexport const registerUser = (userData, history) => dispatch => {\n    axios.post ('/api/users/register', userData)\n        .then(res => history.push('/login'))\n        .catch(err => dispatch({\n                type: GET_ERRORS,\n                payload: err.response.data\n            })\n        );\n}\n\n\n// Login - Get User Token\nexport const loginUser = (credentials) => dispatch => {\n    axios.post('/api/users/login', credentials)\n        .then(res => {\n            // Save to localStorage\n            const { token } = res.data;\n\n            // Set token to ls\n            localStorage.setItem('jwtToken', token);\n\n            // Set token to Auth header\n            setAuthToken(token);\n\n            // Decode Token\n            const decoded = jwt_decode(token);\n            \n            // Set Current User\n            dispatch(setCurrentUser(decoded));\n        })\n        .catch(err => dispatch({\n                type: GET_ERRORS,\n                payload: err.response.data\n            })\n        );\n}\n\n// Set Current User\nexport const setCurrentUser = (decoded) => {\n    return {\n        type: SET_CURRENT_USER,\n        payload: decoded\n    }\n}\n\n// Log out user\nexport const logoutUser = history => dispatch => {\n    // Remove Token from localStorage\n    localStorage.removeItem('jwtToken');\n    // Remove Auth Header for future requests\n    setAuthToken(false);\n    // Set current to {}  which will set isAuthenticated false\n    dispatch(setCurrentUser({}));\n    // Redirect to landing page\n    history.push('/');\n}"]},"metadata":{},"sourceType":"module"}